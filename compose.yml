name: oasis_example_setup
services:
  db:
    image: kartoza/postgis:15 # Use this instead of the official image as it has an arm64 image
    volumes:
      - ts-data-raw:/var/lib/postgresql # for postgres image
      - ./datastore/database/healthcheck_postgis_uptime.sh:/healthcheck_postgis_uptime.sh # for the healthcheck
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=data
    shm_size: 312m
    restart: always
    healthcheck:
      # HACK Due to the installation of Postgis extension the database is restarted, the healthcheck checks if the database is up for longer than specified time.
      test:
        [
          "CMD-SHELL",
          "/healthcheck_postgis_uptime.sh postgresql://postgres:mysecretpassword@localhost/data 10 second",
        ]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 30s # Failures in 30 seconds do not mark container as unhealthy

  prometheus-postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_URI=db:5432/data
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=mysecretpassword
    ports:
      - "9187:9187"
    volumes:
      - ./postgres_exporter.yml:/postgres_exporter.yml:ro
    depends_on:
      db:
        condition: service_healthy
    command:
      [
        "--collector.stat_statements",
        "--collector.stat_user_tables",
        "--collector.stat_activity_autovacuum",
      ]

  migrate:
    image: ghcr.io/eumetnet/e-soh/migrate:0.3.0
    environment:
      - DB_USER=postgres
      - DB_PASS=mysecretpassword
      - DB_URL=db
    depends_on:
      db:
        condition: service_healthy

  store:
    image: ghcr.io/eumetnet/e-soh/datastore:0.3.0
    environment:
      - PGHOST=db
      - PGPORT=5432
      - CLEANUPINTERVAL=$CLEANUPINTERVAL
      - PUTOBSLIMIT=$PUTOBSLIMIT
      - LOTIME=86400
      - HITIME=-600
    restart: always
    healthcheck:
      test:
        ["CMD-SHELL", "exit $(/bin/grpc_health_probe -addr=localhost:50050)"]
      interval: 5s
      timeout: 1s
      retries: 15
      start_period: 60s
    depends_on:
      migrate:
        condition: service_completed_successfully

  api:
    image: ghcr.io/eumetnet/e-soh/api:0.3.0
    ports:
      - "8008:8000"
    environment:
      - DSHOST=store
      - DSPORT=50050
      - GRPC_MAX_MESSAGE_SIZE=-1
      - FORWARDED_ALLOW_IPS=${FORWARDED_ALLOW_IPS:-127.0.0.1}
      - GUNICORN_CMD_ARGS=--bind 0.0.0.0:8000 --workers=4 --access-logfile -
      - FASTAPI_ROOT_PATH=/raw/
    restart: always
    depends_on:
      store:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/health || exit 1"]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 30s # Failures in 30 seconds do not mark container as unhealthy

  ingest:
    image: ghcr.io/eumetnet/e-soh/ingest:0.3.0
    ports:
      - "8009:8001"
    network_mode: ""
    restart: always
    environment:
      - DSHOST=${DSHOST:-store}
      - DSPORT=${DSPORT:-50050}
      - MQTT_HOST=iot.esoh.met.no
      - MQTT_PORT=8883
      - MQTT_TLS=True
      - MQTT_TOPIC_PREPEND=raw-obs
      - INGEST_LOGLEVEL
      - GUNICORN_CMD_ARGS=--bind 0.0.0.0:8001 --workers=8 --access-logfile -
      - FASTAPI_ROOT_PATH=/raw/ingest/
    depends_on:
      store:
        condition: service_healthy

volumes:
  ts-data-raw:
